basePath: /
definitions:
  model.AddressResponse:
    properties:
      address:
        type: string
      address_id:
        type: string
      location:
        $ref: '#/definitions/model.LocationResponse'
      location_geography:
        $ref: '#/definitions/model.LocationGeography'
    type: object
  model.ClubResponse:
    properties:
      address:
        $ref: '#/definitions/model.AddressResponse'
      close_time:
        type: string
      description:
        type: string
      id:
        type: string
      media:
        items:
          $ref: '#/definitions/model.MediaResponse'
        type: array
      name:
        type: string
      open_time:
        type: string
      owner_id:
        type: string
      phone:
        type: string
      sport_types:
        items:
          $ref: '#/definitions/spb_bsa_api_sport_type_model.SportTypeResponse'
        type: array
    type: object
  model.CreateAddressRequest:
    properties:
      address:
        maxLength: 255
        type: string
      location:
        $ref: '#/definitions/model.LocationRequest'
      location_geography:
        $ref: '#/definitions/model.LocationGeography'
    required:
    - address
    - location
    - location_geography
    type: object
  model.CreateClubRequest:
    properties:
      address:
        $ref: '#/definitions/model.CreateAddressRequest'
      close_time:
        type: string
      description:
        type: string
      media:
        items:
          $ref: '#/definitions/model.CreateMediaRequest'
        type: array
      name:
        type: string
      open_time:
        type: string
      owner_id:
        type: string
      phone:
        type: string
      sport_types:
        items:
          $ref: '#/definitions/spb_bsa_api_sport_type_model.CreateSportTypeRequest'
        type: array
    required:
    - address
    - close_time
    - media
    - name
    - open_time
    - owner_id
    - phone
    - sport_types
    type: object
  model.CreateLocationRequest:
    properties:
      locations:
        items:
          $ref: '#/definitions/model.LocationRequest'
        minItems: 1
        type: array
    required:
    - locations
    type: object
  model.CreateMediaRequest:
    properties:
      file_path:
        maxLength: 255
        type: string
      file_type:
        maxLength: 255
        type: string
      hash:
        maxLength: 255
        type: string
      uploaded_at:
        type: string
    required:
    - file_path
    - file_type
    - hash
    - uploaded_at
    type: object
  model.CreateUnitPriceRequest:
    properties:
      end_time:
        type: string
      price:
        type: number
      start_time:
        type: string
    type: object
  model.CreateUnitRequest:
    properties:
      address:
        $ref: '#/definitions/model.CreateAddressRequest'
      close_time:
        type: string
      club_id:
        type: string
      description:
        maxLength: 3000
        type: string
      media:
        items:
          $ref: '#/definitions/model.CreateMediaRequest'
        type: array
      name:
        maxLength: 255
        type: string
      open_time:
        type: string
      phone:
        type: string
      sport_types:
        items:
          $ref: '#/definitions/spb_bsa_api_sport_type_model.CreateSportTypeRequest'
        type: array
      status:
        enum:
        - 0
        - 1
        type: integer
      unit_prices:
        items:
          $ref: '#/definitions/model.CreateUnitPriceRequest'
        type: array
      unit_services:
        items:
          $ref: '#/definitions/model.CreateUnitServiceRequest'
        type: array
    required:
    - address
    - close_time
    - club_id
    - media
    - name
    - open_time
    - phone
    - sport_types
    - unit_prices
    type: object
  model.CreateUnitServiceRequest:
    properties:
      description:
        maxLength: 3000
        type: string
      icon:
        maxLength: 255
        type: string
      price:
        type: number
      unit_id:
        type: string
    required:
    - icon
    type: object
  model.CreateUserRequest:
    properties:
      email:
        maxLength: 256
        minLength: 6
        type: string
      password:
        maxLength: 256
        minLength: 6
        type: string
      role:
        type: string
    required:
    - email
    - password
    - role
    type: object
  model.ForgotPasswordRequest:
    properties:
      email:
        maxLength: 256
        minLength: 6
        type: string
    required:
    - email
    type: object
  model.GetUsersResponse:
    properties:
      pagination:
        $ref: '#/definitions/utils.Pagination'
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/spb_bsa_api_user_model.UserResponse'
        type: array
    type: object
  model.GoogleCallbackRequest:
    properties:
      code:
        type: string
    required:
    - code
    type: object
  model.LocationGeography:
    properties:
      latitude:
        type: number
      longitude:
        type: number
    required:
    - latitude
    - longitude
    type: object
  model.LocationRequest:
    properties:
      city:
        maxLength: 255
        minLength: 2
        type: string
      description:
        maxLength: 3000
        type: string
      district:
        maxLength: 255
        minLength: 2
        type: string
      province:
        maxLength: 255
        minLength: 2
        type: string
    required:
    - city
    - district
    - province
    type: object
  model.LocationResponse:
    properties:
      city:
        type: string
      city_slug:
        type: string
      description:
        type: string
      district:
        type: string
      district_slug:
        type: string
      location_id:
        type: string
      province:
        type: string
      province_slug:
        type: string
    type: object
  model.LocationsResponse:
    properties:
      locations:
        items:
          $ref: '#/definitions/model.LocationResponse'
        type: array
      pagination:
        $ref: '#/definitions/utils.Pagination'
      total:
        type: integer
    type: object
  model.LoginRequest:
    properties:
      email:
        maxLength: 256
        minLength: 6
        type: string
      password:
        maxLength: 256
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  model.LoginResponse:
    properties:
      access_token:
        type: string
      user:
        $ref: '#/definitions/spb_bsa_api_auth_model.UserResponse'
    type: object
  model.MediaResponse:
    properties:
      file_path:
        type: string
      file_type:
        type: string
      hash:
        type: string
      media_id:
        type: string
      uploaded_at:
        type: string
    type: object
  model.MetadataResponse:
    properties:
      description:
        type: string
      key:
        type: string
      metadata_id:
        type: string
      value:
        type: string
    type: object
  model.RegisterRequest:
    properties:
      email:
        maxLength: 256
        minLength: 6
        type: string
      password:
        maxLength: 256
        minLength: 6
        type: string
    required:
    - email
    - password
    type: object
  model.ResendVerifyRegisterTokenRequest:
    properties:
      email:
        maxLength: 256
        minLength: 6
        type: string
    required:
    - email
    type: object
  model.ResetPasswordRequest:
    properties:
      email:
        maxLength: 256
        minLength: 6
        type: string
      password:
        maxLength: 256
        minLength: 6
        type: string
      token:
        maximum: 1000000
        minimum: 999
        type: integer
    required:
    - email
    - password
    type: object
  model.RoleResponse:
    properties:
      permissions:
        type: integer
      role_id:
        type: string
      role_name:
        type: string
    type: object
  model.SendVerificationRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  model.UnitPriceResponse:
    properties:
      end_time:
        type: string
      price:
        type: number
      start_time:
        type: string
      unitPrice_id:
        type: string
    type: object
  model.UnitPricesResponse:
    properties:
      pagination:
        $ref: '#/definitions/utils.Pagination'
      total:
        type: integer
      unit_prices:
        items:
          $ref: '#/definitions/model.UnitPriceResponse'
        type: array
    type: object
  model.UnitResponse:
    properties:
      address:
        $ref: '#/definitions/model.AddressResponse'
      close_time:
        type: string
      club_id:
        type: string
      description:
        type: string
      media:
        items:
          $ref: '#/definitions/model.MediaResponse'
        type: array
      name:
        type: string
      open_time:
        type: string
      phone:
        type: string
      sport_types:
        items:
          $ref: '#/definitions/spb_bsa_api_sport_type_model.SportTypeResponse'
        type: array
      status:
        type: integer
      unit_id:
        type: string
      unit_prices:
        items:
          $ref: '#/definitions/model.UnitPriceResponse'
        type: array
      unit_services:
        items:
          $ref: '#/definitions/model.UnitServiceResponse'
        type: array
    type: object
  model.UnitServiceResponse:
    properties:
      description:
        type: string
      icon:
        type: string
      price:
        type: number
      unit_id:
        type: string
      unit_service_id:
        type: string
    type: object
  model.UnitServicesResponse:
    properties:
      pagination:
        $ref: '#/definitions/utils.Pagination'
      total:
        type: integer
      unit_services:
        items:
          $ref: '#/definitions/model.UnitServiceResponse'
        type: array
    type: object
  model.UpdateAddressRequest:
    properties:
      address:
        maxLength: 255
        type: string
      location:
        $ref: '#/definitions/model.UpdateLocationRequest'
      location_geography:
        $ref: '#/definitions/model.LocationGeography'
    type: object
  model.UpdateClubRequest:
    properties:
      address:
        $ref: '#/definitions/model.UpdateAddressRequest'
      close_time:
        type: string
      description:
        type: string
      media:
        items:
          $ref: '#/definitions/model.UpdateMediaRequest'
        type: array
      name:
        type: string
      open_time:
        type: string
      phone:
        type: string
      sport_types:
        items:
          $ref: '#/definitions/spb_bsa_api_sport_type_model.UpdateSportTypeRequest'
        type: array
    type: object
  model.UpdateLocationRequest:
    properties:
      city:
        maxLength: 255
        minLength: 2
        type: string
      description:
        maxLength: 3000
        type: string
      district:
        maxLength: 255
        minLength: 2
        type: string
      province:
        maxLength: 255
        minLength: 2
        type: string
    type: object
  model.UpdateMediaRequest:
    properties:
      file_path:
        maxLength: 255
        type: string
      file_type:
        maxLength: 255
        type: string
      hash:
        maxLength: 255
        type: string
      uploaded_at:
        type: string
    type: object
  model.UpdateMetadataRequest:
    properties:
      description:
        maxLength: 3000
        minLength: 1
        type: string
      value:
        maxLength: 3000
        minLength: 1
        type: string
    type: object
  model.UpdateUnitPriceRequest:
    properties:
      end_time:
        type: string
      price:
        type: number
      start_time:
        type: string
    type: object
  model.UpdateUnitRequest:
    properties:
      address:
        $ref: '#/definitions/model.UpdateAddressRequest'
      close_time:
        type: string
      club_id:
        type: string
      description:
        maxLength: 3000
        type: string
      media:
        items:
          $ref: '#/definitions/model.UpdateMediaRequest'
        type: array
      name:
        maxLength: 255
        type: string
      open_time:
        type: string
      phone:
        type: string
      sport_types:
        items:
          $ref: '#/definitions/spb_bsa_api_sport_type_model.UpdateSportTypeRequest'
        type: array
      status:
        enum:
        - 0
        - 1
        type: integer
      unit_prices:
        items:
          $ref: '#/definitions/model.UpdateUnitPriceRequest'
        type: array
      unit_services:
        items:
          $ref: '#/definitions/model.UpdateUnitServiceRequest'
        type: array
    type: object
  model.UpdateUnitServiceRequest:
    properties:
      description:
        maxLength: 3000
        type: string
      icon:
        maxLength: 255
        type: string
      price:
        type: number
    type: object
  model.UpdateUserRequest:
    properties:
      full_name:
        maxLength: 255
        minLength: 2
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  model.VerifyForgotPasswordTokenRequest:
    properties:
      email:
        maxLength: 256
        minLength: 6
        type: string
      token:
        maximum: 1000000
        minimum: 999
        type: integer
    required:
    - email
    type: object
  model.VerifyRegisterTokenRequest:
    properties:
      email:
        maxLength: 256
        minLength: 6
        type: string
      token:
        maximum: 1000000
        minimum: 999
        type: integer
    required:
    - email
    type: object
  spb_bsa_api_auth_model.UserResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      phone:
        type: string
      user_id:
        type: string
    type: object
  spb_bsa_api_sport_type_model.CreateSportTypeRequest:
    properties:
      name:
        maxLength: 255
        type: string
    required:
    - name
    type: object
  spb_bsa_api_sport_type_model.SportTypeResponse:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  spb_bsa_api_sport_type_model.SportTypesResponse:
    properties:
      sport_types:
        items:
          $ref: '#/definitions/spb_bsa_api_sport_type_model.SportTypeResponse'
        type: array
      total:
        type: integer
    type: object
  spb_bsa_api_sport_type_model.UpdateSportTypeRequest:
    properties:
      name:
        maxLength: 255
        type: string
    required:
    - name
    type: object
  spb_bsa_api_user_model.UserResponse:
    properties:
      email:
        type: string
      full_name:
        type: string
      is_email_verified:
        type: boolean
      phone:
        type: string
      role:
        $ref: '#/definitions/model.RoleResponse'
      user_id:
        type: string
    type: object
  utils.JSONResult:
    properties:
      code:
        type: string
      data: {}
    type: object
  utils.Pagination:
    properties:
      next_page:
        type: string
      order_by:
        description: order by
        type: string
      order_type:
        description: order type
        type: string
      page:
        description: current page
        type: integer
      page_items:
        description: number item per page
        type: integer
      prev_page:
        type: string
      total_items:
        description: total items
        type: integer
      total_pages:
        description: total pages (total_items / items per page)
        type: integer
    type: object
host: localhost:3000
info:
  contact:
    email: loanTT@gmail.com
    name: LoanTT
  description: This is a swagger for Sport Booking APIs
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Sport Booking API
  version: "1.0"
paths:
  /api/auth/google/callback:
    post:
      consumes:
      - application/json
      description: Google callback api
      parameters:
      - description: Google callback
        in: body
        name: Group
        required: true
        schema:
          $ref: '#/definitions/model.GoogleCallbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Google callback success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Google callback failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Google callback api
      tags:
      - auth
  /api/v1/auth/forgot-password:
    post:
      consumes:
      - application/json
      description: Forgot password api
      parameters:
      - description: Forgot password
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Forgot password success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Forgot password failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Forgot password api
      tags:
      - auth
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login api
      parameters:
      - description: Login
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.LoginResponse'
              type: object
        "400":
          description: Login failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Login api
      tags:
      - auth
  /api/v1/auth/logout:
    post:
      consumes:
      - application/json
      description: Logout api
      produces:
      - application/json
      responses:
        "200":
          description: Logout success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Logout failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Logout api
      tags:
      - auth
  /api/v1/auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh token api
      produces:
      - application/json
      responses:
        "200":
          description: Refresh token success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.LoginResponse'
              type: object
        "400":
          description: Refresh token failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Refresh token api
      tags:
      - auth
  /api/v1/auth/register:
    post:
      consumes:
      - application/json
      description: Register new user api
      parameters:
      - description: Register
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Register success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Register email verifying
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Register new user api
      tags:
      - auth
  /api/v1/auth/reset-password:
    post:
      consumes:
      - application/json
      description: Reset password api
      parameters:
      - description: Reset password
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Reset password success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Reset password failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Reset password api
      tags:
      - auth
  /api/v1/auth/ses-verify:
    post:
      consumes:
      - application/json
      description: Send verification email api
      parameters:
      - description: Send verification email
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.SendVerificationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Send verification email success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Send verification email failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Send verification email api
      tags:
      - auth
  /api/v1/auth/verify-forgot-password-token:
    post:
      consumes:
      - application/json
      description: Verify reset token api
      parameters:
      - description: Verify reset token
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.VerifyForgotPasswordTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Verify reset token success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Verify reset token failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Verify reset token api
      tags:
      - auth
  /api/v1/auth/verify-register-token:
    post:
      consumes:
      - application/json
      description: Verify email api
      parameters:
      - description: Verify email
        in: body
        name: group
        required: true
        schema:
          $ref: '#/definitions/model.VerifyRegisterTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Email verification success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Verify token error
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Verify email api
      tags:
      - auth
  /api/v1/auth/verify-register-token/resend:
    post:
      consumes:
      - application/json
      description: Resend verify register token
      parameters:
      - description: body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/model.ResendVerifyRegisterTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Resend verify email OTP success
          schema:
            type: string
        "400":
          description: Resend verify email OTP failed
          schema:
            type: string
      summary: Resend verify register token
      tags:
      - auth
  /api/v1/clubs:
    post:
      consumes:
      - application/json
      description: Create club api
      parameters:
      - description: Create club
        in: body
        name: Group
        required: true
        schema:
          $ref: '#/definitions/model.CreateClubRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Create club success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.ClubResponse'
              type: object
        "400":
          description: Create club failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Create club api
      tags:
      - clubs
  /api/v1/clubs/{id}:
    delete:
      consumes:
      - application/json
      description: Delete club api
      parameters:
      - description: club id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delete club success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Delete club failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Delete club api
      tags:
      - clubs
    get:
      consumes:
      - application/json
      description: Get club by id
      parameters:
      - description: Club ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get club by id success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Get club by id failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get club by id
      tags:
      - clubs
    put:
      consumes:
      - application/json
      description: Update club by id
      parameters:
      - description: Club data
        in: body
        name: club
        required: true
        schema:
          $ref: '#/definitions/model.UpdateClubRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update club by id success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.ClubResponse'
              type: object
        "400":
          description: Update club by id failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Update club by id
      tags:
      - clubs
  /api/v1/locations:
    get:
      consumes:
      - application/json
      description: Get all locations api
      parameters:
      - description: Number items on page
        in: query
        name: i
        type: integer
      - description: Page number
        in: query
        name: p
        type: integer
      - description: Order by
        in: query
        name: b
        type: string
      - description: Order type
        in: query
        name: t
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get all locations success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.LocationsResponse'
              type: object
        "404":
          description: Get all locations failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get all locations api
      tags:
      - locations
    post:
      consumes:
      - application/json
      description: Create location api
      parameters:
      - description: Create location
        in: body
        name: Group
        required: true
        schema:
          $ref: '#/definitions/model.CreateLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Create location success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.LocationsResponse'
              type: object
        "400":
          description: Create location failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Create location api
      tags:
      - locations
  /api/v1/locations/{id}:
    delete:
      consumes:
      - application/json
      description: Delete location api
      parameters:
      - description: location id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delete location success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Delete location failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Delete location api
      tags:
      - locations
    put:
      consumes:
      - application/json
      description: Update location by id api
      parameters:
      - description: Location data
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/model.UpdateLocationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update location by id success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.LocationResponse'
              type: object
        "400":
          description: Update location by id failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Update location by id api
      tags:
      - locations
  /api/v1/metadatas/{key}:
    get:
      consumes:
      - application/json
      description: Get metadata by key
      parameters:
      - description: Metadata Key
        in: path
        name: key
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get metadata by key success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Get metadata by key failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get metadata by key
      tags:
      - metadatas
    put:
      consumes:
      - application/json
      description: Update metadata by key
      parameters:
      - description: Metadata data
        in: body
        name: metadata
        required: true
        schema:
          $ref: '#/definitions/model.UpdateMetadataRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update metadata by key success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.MetadataResponse'
              type: object
        "400":
          description: Update metadata by key failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Update metadata by key
      tags:
      - metadatas
  /api/v1/sport_types:
    get:
      consumes:
      - application/json
      description: Get all sport type api
      produces:
      - application/json
      responses:
        "200":
          description: Get all sport type success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/spb_bsa_api_sport_type_model.SportTypesResponse'
              type: object
        "400":
          description: Get all sport type failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get all sport type api
      tags:
      - sport types
    post:
      consumes:
      - application/json
      description: Create sport type api
      parameters:
      - description: Create sport type
        in: body
        name: Group
        required: true
        schema:
          $ref: '#/definitions/spb_bsa_api_sport_type_model.CreateSportTypeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Create sport type success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/spb_bsa_api_sport_type_model.SportTypeResponse'
              type: object
        "400":
          description: Create sport type failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Create sport type api
      tags:
      - sport types
  /api/v1/sport_types/{id}:
    delete:
      description: Delete sport type api
      parameters:
      - description: Sport type ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Delete sport type success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Delete sport type failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Delete sport type api
      tags:
      - sport types
    get:
      description: Get sport type by ID api
      parameters:
      - description: Sport type ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Get sport type by ID success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/spb_bsa_api_sport_type_model.SportTypeResponse'
              type: object
        "400":
          description: Get sport type by ID failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get sport type by ID api
      tags:
      - sport types
    put:
      consumes:
      - application/json
      description: Update sport type api
      parameters:
      - description: Sport type ID
        in: path
        name: id
        required: true
        type: string
      - description: Update sport type
        in: body
        name: Group
        required: true
        schema:
          $ref: '#/definitions/spb_bsa_api_sport_type_model.UpdateSportTypeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update sport type success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/spb_bsa_api_sport_type_model.SportTypeResponse'
              type: object
        "400":
          description: Update sport type failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Update sport type api
      tags:
      - sport types
  /api/v1/unit-prices:
    get:
      consumes:
      - application/json
      description: Get all unit price
      parameters:
      - description: Number items on page
        in: query
        name: i
        type: integer
      - description: Page number
        in: query
        name: p
        type: integer
      - description: Order by
        in: query
        name: b
        type: string
      - description: Order type
        in: query
        name: t
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get all unit price success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.UnitPricesResponse'
              type: object
        "404":
          description: Get all unit price failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get all unit price
      tags:
      - unit-prices
    post:
      consumes:
      - application/json
      description: Create unit price
      parameters:
      - description: Create unit price
        in: body
        name: Group
        required: true
        schema:
          $ref: '#/definitions/model.CreateUnitPriceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Create unit price success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.UnitPriceResponse'
              type: object
        "400":
          description: Create unit price failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Create unit price
      tags:
      - unit-prices
  /api/v1/unit-prices/{id}:
    delete:
      consumes:
      - application/json
      description: Delete unit price
      parameters:
      - description: unit price id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delete unit price success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Delete unit price failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Delete unit price
      tags:
      - unit-prices
    get:
      consumes:
      - application/json
      description: Get unit price by id
      parameters:
      - description: Unit price ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get unit price by id success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Get unit price by id failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get unit price by id
      tags:
      - unit-prices
    put:
      consumes:
      - application/json
      description: Update unit price by id
      parameters:
      - description: Unit price data
        in: body
        name: unitPrice
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUnitPriceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update unit price by id success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.UnitPriceResponse'
              type: object
        "400":
          description: Update unit price by id failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Update unit price by id
      tags:
      - unit-prices
  /api/v1/unit-services:
    get:
      consumes:
      - application/json
      description: Get all unit service
      parameters:
      - description: Number items on page
        in: query
        name: i
        type: integer
      - description: Page number
        in: query
        name: p
        type: integer
      - description: Order by
        in: query
        name: b
        type: string
      - description: Order type
        in: query
        name: t
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get all unit service success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.UnitServicesResponse'
              type: object
        "404":
          description: Get all unit service failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get all unit service
      tags:
      - unit-services
    post:
      consumes:
      - application/json
      description: Create unit service
      parameters:
      - description: Create unit service
        in: body
        name: Group
        required: true
        schema:
          $ref: '#/definitions/model.CreateUnitServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Create unit service success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.UnitServiceResponse'
              type: object
        "400":
          description: Create unit service failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Create unit service
      tags:
      - unit-services
  /api/v1/unit-services/{id}:
    delete:
      consumes:
      - application/json
      description: Delete unit service
      parameters:
      - description: unit service id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delete unit service success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Delete unit service failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Delete unit service
      tags:
      - unit-services
    get:
      consumes:
      - application/json
      description: Get unit service by id
      parameters:
      - description: Unit service id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get unit service by id success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Get unit service by id failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get unit service by id
      tags:
      - unit-services
    put:
      consumes:
      - application/json
      description: Update unit service by id
      parameters:
      - description: Unit service data
        in: body
        name: unitService
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUnitServiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update unit service by id success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.UnitServiceResponse'
              type: object
        "400":
          description: Update unit service by id failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Update unit service by id
      tags:
      - unit-services
  /api/v1/units:
    post:
      consumes:
      - application/json
      description: Create unit api
      parameters:
      - description: Create unit
        in: body
        name: Group
        required: true
        schema:
          $ref: '#/definitions/model.CreateUnitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Create unit success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.UnitResponse'
              type: object
        "400":
          description: Create unit failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Create unit api
      tags:
      - units
  /api/v1/units/{id}:
    delete:
      consumes:
      - application/json
      description: Delete unit api
      parameters:
      - description: unit id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delete unit success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                message:
                  type: string
              type: object
        "400":
          description: Delete unit failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Delete unit api
      tags:
      - units
    get:
      consumes:
      - application/json
      description: Get unit by id
      parameters:
      - description: Unit ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get unit by id success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Get unit by id failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get unit by id
      tags:
      - units
    put:
      consumes:
      - application/json
      description: Update unit by id
      parameters:
      - description: Unit data
        in: body
        name: unit
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUnitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update unit by id success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.UnitResponse'
              type: object
        "400":
          description: Update unit by id failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Update unit by id
      tags:
      - units
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Number items on page
        in: query
        name: i
        type: integer
      - description: Page number
        in: query
        name: p
        type: integer
      - description: Order by
        in: query
        name: b
        type: string
      - description: Order type
        in: query
        name: t
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get all users success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/model.GetUsersResponse'
              type: object
        "404":
          description: Get all users failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: Create user
        in: body
        name: Group
        required: true
        schema:
          $ref: '#/definitions/model.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Create user success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/spb_bsa_api_user_model.UserResponse'
              type: object
        "400":
          description: Create user failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Create user
      tags:
      - users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Delete user success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Delete user failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by id
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get user by id success
          schema:
            $ref: '#/definitions/utils.JSONResult'
        "400":
          description: Get user by id failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Get user by id
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user by id
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Update user by id success
          schema:
            allOf:
            - $ref: '#/definitions/utils.JSONResult'
            - properties:
                data:
                  $ref: '#/definitions/spb_bsa_api_user_model.UserResponse'
              type: object
        "400":
          description: Update user by id failed
          schema:
            $ref: '#/definitions/utils.JSONResult'
      summary: Update user by id
      tags:
      - users
swagger: "2.0"
